package main

import (
	"bufio"
	"fmt"
	"math"
	"math/rand"
	"os"
	"time"
)

const _NOISE_LIMIT = 20
const _RANDOM_LENGTH = 50
const _PRINT_WHITE = '.'
const _PRINT_BLACK = '#'

type pair struct {
	x, y int
}

var TC, W, H int
var mp [70][9010]bool
var tmp [70][9010]bool
var vis [][]bool
var major []Map
var samp [][]Map
var List []pair
var Characters []Map
var dir [8][2]int = [8][2]int{{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, -1}, {1, 1}, {-1, -1}, {-1, 1}}
var alphabet string = "0123456789()+-*/"
var Expression []byte

func main() {
	in := bufio.NewReader(os.Stdin)

	rand.Seed(time.Now().UnixNano())
	fmt.Fscan(in, &TC, &W, &H)
	major = make([]Map, 20)
	samp = make([][]Map, 20)
	Characters = make([]Map, 0)
	Init()
	generateSample()
	for i := 1; i <= H; i++ {
		var s string
		fmt.Fscan(in, &s)
		for j := 1; j <= W; j++ {
			if s[j-1] == '#' {
				mp[i][j] = true
			}
		}
	}
	reduceNoise()
	getMaps()
	calcExpression()
	fmt.Printf("%d\n", getAnswer())
}

func Init() {
	for k := 0; k < 16; k++ {
		L := make([]Dot, 0)
		for i := 0; i < 53; i++ {
			p := FontLibrary[k][i]
			for j := 29; j+1 >= 0; j-- {
				if (p & 1) != 0 {
					L = append(L, Dot{float64(i), float64(j)})
				}
				p >>= 1
			}
		}
		major[k].set(L)
	}
}

func generateSample() {
	cntr := Dot{65.0 / 2, 38.0 / 2}
	for k := 0; k < 16; k++ {
		for q := 0; q < _RANDOM_LENGTH; q++ {
			M := rnd(0.9, 1)
			Mh := rnd(0.9, 1)
			Mw := rnd(0.9, 1)
			var Sx, Sy, R float64
			if TC < 30 {
				Sx = rnd(0, 0)
				Sy = rnd(0, 0)
				R = rnd(-2, 2)
			} else if TC < 90 {
				Sx = rnd(-0.1, 0.1)
				Sy = rnd(-0.1, 0.1)
				R = rnd(-10, 10)
			} else {
				Sx = rnd(-0.1, 0.1)
				Sy = rnd(-0.1, 0.1)
				R = rnd(-15, 15)
			}
			var n Map
			Q := make([]Dot, 0)
			for i := 0; i < 65; i++ {
				for j := 0; j < 38; j++ {
					if major[k].info[i][j] {
						p := Dot{float64(i) + 0.5, float64(j) + 0.5}
						p = p.minus(cntr)
						p.x *= M * Mh
						p.y *= M * Mw
						p = p.rotate(R / 180.0 * math.Pi)
						xx := p.x
						yy := p.y
						p.x = xx + Sy*yy
						p.y = yy + Sx*xx
						p = p.plus(cntr)
						Q = append(Q, p)
					}
				}
			}
			n.set(Q)
			samp[k] = append(samp[k], n)
		}
	}
}

func rnd(l, r float64) float64 {
	val := rand.Int31()
	return float64(val%10001)/10000.0*(r-l) + l
}

func reduceNoise() {
	for i := 1; i <= H; i++ {
		for j := 1; j <= W; j++ {
			p, q := 0, 0
			for l := 0; l < 8; l++ {
				ii := i + dir[l][0]
				jj := j + dir[l][1]
				if ii < 1 || ii > H || jj < 1 || jj > W {
					continue
				}
				if mp[ii][jj] {
					p++
				} else {
					q++
				}
			}
			tmp[i][j] = p > q
		}
	}
	for i := 1; i <= H; i++ {
		for j := 1; j <= W; j++ {
			mp[i][j] = tmp[i][j]
		}
	}
	vis = make([][]bool, 70)
	for i := range vis {
		vis[i] = make([]bool, 9010)
	}
	for i := 1; i <= H; i++ {
		for j := 1; j <= W; j++ {
			if mp[i][j] && !vis[i][j] {
				List = make([]pair, 0)
				dfs(i, j)
				if len(List) <= _NOISE_LIMIT {
					for _, x := range List {
						mp[x.x][x.y] = false
					}
				}
			}
		}
	}
}

func dfs(x, y int) {
	vis[x][y] = true
	List = append(List, pair{x, y})
	for i := 0; i < 4; i++ {
		xx := x + dir[i][0]
		yy := y + dir[i][1]
		if mp[xx][yy] && !vis[xx][yy] {
			dfs(xx, yy)
		}
	}
}

func getMaps() {
	vis = make([][]bool, 70)
	for i := range vis {
		vis[i] = make([]bool, 9010)
	}
	for j := 1; j <= W; j++ {
		for i := 1; i <= H; i++ {
			if mp[i][j] && !vis[i][j] {
				List = make([]pair, 0)
				dfs(i, j)
				D := make([]Dot, 0)
				for _, x := range List {
					D = append(D, Dot{float64(x.x), float64(x.y)})
				}
				Characters = append(Characters, *MapInit(65, 38))
				Characters[len(Characters)-1].set(D)
			}
		}
	}
}

func calcExpression() {
	for _, I := range Characters {
		id := -1
		p := -1.0
		for x := 0; x < 16; x++ {
			curr := 0.0
			for _, m := range samp[x] {
				curr = math.Max(curr, I.match(m))
			}
			if curr > p {
				p = curr
				id = x
			}
		}
		Expression = append(Expression, alphabet[id])
	}
}

func getAnswer() int {
	bak := make([]byte, 0)
	stk := make([]byte, 0)
	for _, ch := range Expression {
		if ch >= '0' && ch <= '9' {
			bak = append(bak, ch)
		} else if ch == '(' {
			stk = append(stk, ch)
		} else if ch == ')' {
			for stk[len(stk)-1] != '(' {
				bak = append(bak, stk[len(stk)-1])
				stk = stk[:len(stk)-1]
			}
			stk = stk[:len(stk)-1]
		} else {
			for len(stk) > 0 && pres(stk[len(stk)-1]) >= pres(ch) {
				bak = append(bak, stk[len(stk)-1])
				stk = stk[:len(stk)-1]
			}
			stk = append(stk, ch)
		}
	}
	for len(stk) > 0 {
		bak = append(bak, stk[len(stk)-1])
		stk = stk[:len(stk)-1]
	}
	e := make([]int, 0)
	for _, ch := range bak {
		if ch >= '0' && ch <= '9' {
			e = append(e, int(ch-'0'))
		} else {
			a := e[len(e)-2]
			b := e[len(e)-1]
			e = e[:len(e)-2]
			if ch == '+' {
				e = append(e, a+b)
			}
			if ch == '-' {
				e = append(e, a-b)
			}
			if ch == '*' {
				e = append(e, a*b)
			}
			if ch == '/' {
				e = append(e, a/b)
			}
		}
	}
	return e[len(e)-1]
}

func pres(ch byte) int {
	if ch == '(' {
		return 0
	}
	if ch == '+' || ch == '-' {
		return 1
	}
	if ch == '*' || ch == '/' {
		return 2
	}
	return -1
}

type Map struct {
	n, m int
	info [][]bool
}

func MapInit(n, m int) *Map {
	ma := new(Map)
	ma.init(n, m)
	return ma
}

func (ma *Map) resize() {
	ma.info = make([][]bool, ma.n)
	for i := range ma.info {
		ma.info[i] = make([]bool, ma.m)
	}
}

func (ma *Map) init(n, m int) {
	ma.n = n
	ma.m = m
	ma.resize()
}

func (ma Map) print() {
	for i := 0; i < ma.n; i++ {
		for j := 0; j < ma.m; j++ {
			if ma.info[i][j] {
				fmt.Printf("%c", _PRINT_BLACK)
			} else {
				fmt.Printf("%c", _PRINT_WHITE)
			}
		}
		fmt.Println()
	}
	fmt.Println()
}

func (ma *Map) set(list []Dot) {
	for i := range list {
		list[i].x = math.Floor(list[i].x + 0.5)
		list[i].y = math.Floor(list[i].y + 0.5)
	}
	x, y := 0.0, 0.0
	for i := range list {
		x += list[i].x
		y += list[i].y
	}
	xx := (2*x + float64(len(list))) / (2 * float64(len(list)))
	yy := (2*y + float64(len(list))) / (2 * float64(len(list)))
	ma.n = 65
	ma.m = 38
	for i := range list {
		list[i].x -= xx
		list[i].y -= yy
	}
	ma.resize()
	for _, p := range list {
		xx := int(math.Floor(p.x + float64(ma.n)/2.0 + 0.5))
		yy := int(math.Floor(p.y + float64(ma.m)/2.0 + 0.5))
		if xx < 0 || xx >= ma.n || yy < 0 || yy >= ma.m {
			continue
		}
		ma.info[xx][yy] = true
	}
}

func (ma Map) match(temp Map) float64 {
	p, q := 0.0, 0.0
	for i := min(ma.n, temp.n) - 1; i >= 0; i-- {
		for j := min(ma.m, temp.m) - 1; j >= 0; j-- {
			q++
			if ma.info[i][j] == temp.info[i][j] {
				p++
			}
		}
	}
	return 1.0 * p / q
}

type Dot struct {
	x, y float64
}

func (b Dot) plus(a Dot) Dot {
	return Dot{b.x + a.x, b.y + a.y}
}

func (b Dot) minus(a Dot) Dot {
	return Dot{b.x - a.x, b.y - a.y}
}

func (b Dot) mul(a Dot) Dot {
	return Dot{b.x*a.x - b.y*a.y, b.x*a.y + b.y*a.x}
}

func (b Dot) rotate(deg float64) Dot {
	return b.mul(Dot{math.Cos(deg), -1.0 * math.Sin(deg)})
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

var FontLibrary = [16][55]int{
	{0, 0, 0, 0, 522240, 2096640, 8388480, 16777152, 33554400, 67108848, 134217720, 134094840, 267913212, 267387900, 535823358, 534774270, 534774270, 534774270, 1069547775, 1069547775, 1069547775, 1069547775, 1069547775, 1069547775, 1069547775, 1069547775, 1069547775, 1069547775, 1069547775, 534774270, 534774270, 534774270, 535823358, 267387900, 267913212, 134094840, 134217720, 67108848, 33554400, 16777152, 8388480, 2096640, 522240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 30720, 130048, 1047552, 8387584, 67107840, 134216704, 134216704, 134216704, 134216704, 66321408, 58981376, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 261120, 134217726, 268435454, 268435454, 268435454, 268435454, 134217726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 1046528, 8388096, 67108736, 134217664, 268435424, 268435424, 268435440, 267919344, 266342392, 266340344, 266340344, 266340344, 266340344, 132122616, 4088, 4080, 8176, 16368, 32736, 65504, 131008, 262016, 524032, 1048064, 2096128, 4192256, 8384636, 16769278, 33538302, 67076350, 134152446, 268304638, 536870910, 536870910, 536870910, 536870910, 536870910, 268435454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 1047552, 16776960, 67108800, 134217696, 134217712, 134217720, 134217720, 133697532, 133171196, 133170172, 133170172, 66061308, 1020, 1020, 2040, 4088, 524272, 1048544, 1048512, 1048544, 1048560, 524280, 4092, 1020, 1022, 510, 510, 510, 510, 1022, 117442558, 267390972, 268435452, 268435448, 536870904, 268435440, 268435392, 33554176, 4192256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 7936, 16256, 32640, 65408, 130944, 262016, 262016, 524160, 1048448, 2097024, 4194176, 8388480, 8372096, 16727936, 33439616, 66862976, 133971840, 133709696, 267403136, 534790016, 1073741823, 1073741823, 1073741823, 1073741823, 1073741823, 1073741823, 32640, 32640, 32640, 32640, 32640, 32640, 2097150, 4194302, 4194302, 4194302, 4194302, 2097150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 67108848, 67108856, 67108856, 67108856, 67108856, 67108848, 66584576, 66584576, 66584576, 66584576, 66584576, 66584576, 133824000, 134217600, 134217696, 134217712, 134217720, 134217720, 134217724, 133697532, 12584956, 1022, 510, 510, 510, 510, 510, 510, 33555454, 125831164, 267395068, 268435452, 268435448, 536870896, 268435424, 134217664, 33554176, 2095104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 504, 16376, 131068, 524284, 2097148, 4194300, 8388600, 16776960, 33546240, 67076096, 66977792, 133955584, 133693440, 267386880, 267386880, 266468864, 266862528, 536870896, 536870904, 536870908, 536870908, 536741886, 536347646, 535822847, 534774015, 534774015, 534774015, 266338559, 266338559, 267387391, 267912190, 134090750, 67108862, 67108860, 33554424, 16777200, 8388576, 2097024, 261120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 268435454, 268435455, 268435455, 268435455, 268435455, 268435454, 266339326, 266339326, 266340348, 266340348, 266340344, 266342392, 266342384, 266346480, 130031600, 8160, 16352, 16320, 32704, 32640, 65408, 65408, 65280, 130816, 130560, 261632, 261120, 261120, 522240, 522240, 1046528, 1044480, 1044480, 2088960, 2088960, 2080768, 2080768, 507904, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 523264, 2096896, 8388544, 16777184, 33554416, 67108856, 67108856, 66981880, 133957628, 133694460, 133694460, 133694460, 133694460, 133694460, 66848760, 66981880, 33554416, 16777184, 8388544, 8388544, 33554416, 67108856, 133959676, 267387900, 267387902, 534774270, 534774270, 534774270, 534774270, 535823358, 535823358, 268177404, 268435452, 134217720, 134217720, 67108848, 33554400, 8388480, 1047552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 1046528, 4193792, 16777088, 33554368, 67108832, 134217712, 268435440, 268177400, 267913212, 535823356, 534774268, 534774268, 534774270, 534774270, 534774270, 535823358, 267388926, 268177406, 134217726, 134217726, 67108862, 33554430, 8387070, 2089468, 508, 1020, 1020, 2040, 4088, 16368, 65520, 1048544, 33554368, 67108736, 67108608, 67107840, 67104768, 67092480, 33030144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 1920, 4032, 16320, 32736, 65504, 131040, 262080, 524032, 1048064, 2096128, 2095104, 4190208, 4186112, 8372224, 8355840, 16744448, 16711680, 33488896, 33423360, 33423360, 33423360, 66977792, 66846720, 66846720, 66846720, 66846720, 66846720, 66846720, 66846720, 66846720, 66846720, 66846720, 33423360, 33423360, 33423360, 33488896, 16711680, 16744448, 16744448, 8372224, 8380416, 4186112, 2093056, 2095104, 1048064, 524032, 262016, 131040, 65504, 32736, 16352, 8128, 1920, 256},
	{0, 7864320, 16515072, 33488896, 33521664, 33538048, 33546240, 16773120, 4192256, 2096128, 1047552, 523776, 261888, 130816, 65408, 32640, 32704, 16320, 16352, 8160, 8160, 8160, 8176, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 8160, 8160, 8160, 16352, 16320, 32704, 32704, 65408, 130944, 261888, 261632, 1048064, 2096128, 4192256, 8384512, 33546240, 33538048, 33521664, 33488896, 16646144, 7864320, 2097152},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126976, 260096, 260096, 260096, 260096, 260096, 260096, 260096, 260096, 260096, 268435454, 268435454, 268435454, 268435454, 268435454, 268435454, 268435454, 260096, 260096, 260096, 260096, 260096, 260096, 260096, 260096, 260096, 260096, 126976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268435452, 536870910, 536870910, 536870910, 536870910, 536870910, 268435454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 122880, 258048, 260096, 522240, 522240, 260096, 258048, 130281592, 132379132, 268040188, 268431356, 268435452, 268435452, 134217720, 4194048, 522240, 1048064, 2096896, 8372096, 16728000, 16728032, 33431520, 33431520, 16650208, 8130496, 3670784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{120, 126, 254, 254, 510, 508, 1020, 1016, 2040, 2032, 4080, 4064, 8160, 8160, 8128, 16320, 16256, 32640, 32512, 65280, 65024, 130560, 130048, 261120, 260096, 522240, 520192, 520192, 1044480, 1040384, 2088960, 2080768, 4177920, 4161536, 8355840, 8323072, 16711680, 16646144, 33423360, 33292288, 66846720, 66846720, 66584576, 133693440, 133169152, 267386880, 266338304, 534773760, 532676608, 264241152, 130023424, 0, 0, 0, 0},
}
